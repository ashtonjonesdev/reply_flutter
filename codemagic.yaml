# Automatically generated on 2020-09-28 UTC from https://codemagic.io/app/5f720d2b40212b879b985c6c/settings
# Note that this configuration is not an exact match to UI settings. Review and adjust as necessary.

workflows:
  default-workflow:
    name: Default Workflow
    max_build_duration: 60
    environment:
      vars:
        CM_KEYSTORE: Encrypted()
        CM_KEYSTORE_PASSWORD: Encrypted(Z0FBQUFBQmZjaGtYSEtDQ2pLSXFHYVZHTDEzNGJPTHZHTG1CS2s1TVA2R3p2NWhYb3lyaDVkMndtQzQtNy1iVmRfTnE3WGZFT2JMZUpTRFl6eU9tbXFEQWlpWllZMTdBa2c9PQ==)
        CM_KEY_ALIAS_PASSWORD: Encrypted(Z0FBQUFBQmZjaGtYdFRRRk1DM3dITVJNOXFJOW1HRllySWI4T05KUjl3YWVPY0oxdDNOaXdmbDhpdDFkUlkwWS04T0o5STB3SVA0OXRZOTl6VXVndjVEa0RiNzY4NGNHVHc9PQ==)
        CM_KEY_ALIAS_USERNAME: Encrypted(Z0FBQUFBQmZjaGtYYUhYN1MxYTdTaGJDZTNFd2JzYXdJTzZNcUVzSkg4bzBuaktHa1g2ZUxzWlhwWmd3V0lvSGJDcWZDOTlrVi1QX1VNeEdvdXE1NWlQY0JEcEgxTkoyQWc9PQ==)
      flutter: stable
      xcode: latest
      cocoapods: default
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: '*'
          include: true
          source: true
    scripts:
      - |
        # set up key.properties
        echo $CM_KEYSTORE | base64 --decode > /tmp/keystore.keystore
        cat >> "$FCI_BUILD_DIR/android/key.properties" <<EOF
        storePassword=$CM_KEYSTORE_PASSWORD
        keyPassword=$CM_KEY_ALIAS_PASSWORD
        keyAlias=$CM_KEY_ALIAS_USERNAME
        storeFile=/tmp/keystore.keystore
        EOF
      - |
        # set up local properties
        echo "flutter.sdk=$HOME/programs/flutter" > "$FCI_BUILD_DIR/android/local.properties"
      - cd . && flutter packages pub get
      - cd . && flutter build appbundle --target-platform android-arm,android-arm64,android-x64flutter pub cache repair
      - find . -name "Podfile" -execdir pod install \;
      - cd . && flutter build ios --release --no-codesign
    artifacts:
      - build/**/outputs/**/*.apk
      - build/**/outputs/**/*.aab
      - build/**/outputs/**/mapping.txt
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - flutter_drive.log
    publishing:
      email:
        recipients:
          - ashtonjonesdev@gmail.com
      app_store_connect:
        apple_id: guitarman76940@gmail.com
        password: zwol-cufr-jpzc-rkpk
      google_play:
        credentials: Encrypted(Z0FBQUFBQmZjalhLZHNEMFZpNU40eEJWWWF0OXU0elFBMmVXaXNmbDNVcXctOTBTMV9yZEZoR0UzSU5iV2IzYUpKRm9mRUs0NHBWWk1EbzBRRXgzQTdYenMwRl9UNWRwUXkzd3RrbUZtM3htVTFKZ3k1aEFpSmtUbExDN2owcFlDM29aREdvZ0tmYW1oUzBKUDJNdV9wV2FRY2ViLWFaaFhoWnoyQ25UT3MyZG9UTHdFMVFMaFVNQWdKaV9YMVEtak5FVkp3M2ljU3Exb2M0TjdvNk1JdEhJbHJqNEc0TUkxaWNpQUEtb2xQcC1OUHlnakxrQnpNN3NscDdVUEtia1N0YmdtTjNlNVpxazV5eG1ZTnQ2bFF4Y1FzQmtqN3Y0alBMd1BkTVBzR1RmUE9NeWRtUDZUSTJIN2dQaWlRMnZhdE1JM1BSRktQc0NIcFVxMzgyNVN2RzM1WV9zWVZGQi1QOE1iY21TZEJlZXc5RGtXTTZScmVxYjVTUG9OTW1jQkpuc3A1U2RCTUZNbERzX0lGem5OTng3cGQ0MUMtUXVtR1ZrWi1mbkVTNHU4Zkh6V3daelpjNjFhVDVaSFAybTVfLTJSLUlJUlNRdFpZSzZ5Y3gzQ2FHS1JTR2NRM1FRYUtQT3FYam1LRkdNTGRISm5EaW1qZHNDdEo4aWdwQS0tV1FiVF8xZEhMUXRDWWlBQ2swY25qRTZaYVhadlYtRUtDVnhTWTI0U0FWS01ZekcySEMySnU2clNTX3JmcUx6bWNNWDdjQXc0bmR6TTRSTzQzT0FpWmNoUEw5bnRYSUNSaTFqTXFhWWk5eFBfc2xmSzFlSElhRlI5Ui1lUDFPSlpDdDhUNWdqZzB2Q04wZlFDU0lVZXFMbjR5eVhYLU1hWm9nUmhfRWE4VjhjYWw5bzNsY2ItclZxZnBZdzJrY1l3NnQzNVNnOUt3S25zM0ZtbmV3ZTdsUGNBTnhoaEgzeXVSOGY5QWdBN2lNU1NjekRUMjlSd3NOWEFLOC1rY0VMSmJqVGFqSElLVmlMNGdiZk1sbDFUODZJXzIxZ1F6NmNKMHc2a19NUDJvZ21qa3czSkNEZTNBb2Jtbmw1eDlKTGNJTVRYQ0N0MW9qdmlSdk9zMnhGQlRZOGNTTVd6bTd2c3I3THgySkNnXzJBbnFZb0xNTGN0RjU4SXNmNEktQkVRVEY4alRzWEh6cV9XRnZnUU5aZkdfWF9EaXptZGFkcnVad202R0RBRjBBZnZ5NDdrRGZQNjIzNW5yY2tXSDIwMDZPc0k5SzNaME8yZHFBZjU2WGpNdERkZDBCeVF5Zm5Va3N3MWZVTWdZYjV0TFc1eHI5XzJMbjFkUnMzbmlRNURFeEMxNk1OcFJuMzdCUjhQdnBRbUhac2Y5NVUxOXRNRmJOVXZKT28wemI4SlZ2Q0tBcVNoM1BRUDEyZmEzb2dwTXB0eUUyT0QtbXFod0RKQk1vSGdTZ0VRWUdna2pQb2tvYXpnclhtNFlBa3l5UzhxX0lXV0pSRElyRzJuUGtVWDROU045MDNFS3F3R3VGMGI2N1VsbElzMUw1cHZLM1htOE1FMkcySEhoR3pOdVduZDFIQTI3WnZEbm9ybWVzcmNTdWl3TWN0SjgwMUhXR3NSQjNJRjNOTFJELUxYWms4STdYQTVQTzNyTk5MODJ3RkgyRExYS196S2haUHRDNUhmY01Dd3pvcW1CckxXTzR3NWtYMlFZVGwySFpXZmROVzBEYjI0Qk16N1lYdnNodUh4OHBrNHVYZi1RNzVMejZnMFh0Y1g4OXpYRlNURG5sbzNHOHJ0OXpvMTJkUU1FMGh6Z1NRUThoeTluWnFFOVRjd0otS0FuVWMwN3FCZWQ2VlBkSHJqZm9SZjVpNnI3M0tEX0NSMlR5bmF4Z185MVlSSllDRWR4M3FySVFXbXk1SldkRVZZcTF5UWVkZXJpaWFMRVVwdDBCMTVtX1lFVDBYZy1EUE5tTDdXbHlHU3dUXzlQU1IySDRhM1Q1Y3lGUmQ0RTVwX0RyUzFnSUszMG43SndXdHYyQ2lobmEtLWRvUGNjdHEtWDRhVUNUSjFoU0taQmd3alU5SXYzWXZBdzBGdU90RmUxTk5RWmpHd1JEVHdSQldTWFhBN0xSckR1SVF5QmNHNWpBNU83cDZkNkNfUGc0V1FHTG9MTFFzTl9BNHJaUDZlLU53NUFDaWhKeE5BUWdPU0pTWGRGR0ltTFVjSWJ4YUF5NXpBQlNQYkZ5ei1qclA2dEplTnVNQTNMU19ia3ZrTlZueDROR1NtbHZZdkJ5ZmVnTE9SU1VleHRHVnNBaXNxbTJXcHFSZ1BWZGxmVEZsakFrNzNQSlp2aVg3RXowbS14Q2RSdTVvSVFoeTB0SjU1NGxRU253dXlUanNHenFWdTBBWjVMZGJ5OHBNb2toWThObHhNZ2JET2FWdzAwQlJNY2xxR1ZpOHlabURfX3IzTE16QW8xWlNib21UWXNNUWFjZnV0SU1kdklmS3ZfLTU3UHZBUl9MV2x4RzVVeEktOXdVWExwX2Nxb05YMF96ZDFWZ3A0Nk1xVXZuYnZnQzFQenAzR2ZvaEMwMGxxd3J6Y01FcXBBYVdOTHB5ZWVWZlNCMmpQMUV6WkE0ZjJTMlVtNURfd21kbDBnSHIzaTNxUVNyTkVMUVdROC1DcjhEVHh2WW9zUENwWFo4Um5KZWw5ZW9ZdmxmREtFWm5sRjhqTTY1djJYa1NnNms0YTVDdU9pY1pRWVVLYjJYdHBkZmpfa08zSUZBOGxRSWgzRGh0SVh0Tlhwdmg5STJ1TVVtdUJBYXJXamE5NVNvcENtS0pwOVpLMGVHaHhJQzJ4TlVGVWlfcDBpSXhlcXFaaHpvQmtjOUsyQjVhd0p6S0RrbmRtaGQ1TkxCUEdiYUFPWGJIb2JoYjl3dnNmSzJrNHc0aW9JRzkxeXNleEszZW04RW1sSGFZZ1FWcG9odFdmcHU1WTBwWXZrM2JMdjl3M21mc3ZvSGY5TGQ5NDVXYzdJME5vbWo3U0pURlBPQmtlYkJ0VGdwUUVRWTdwbUg3UmN3QTM0THlDeFBweFRFQm0xc2dtZDB6T3VKNWJsNjFfSHJ0dEhBMlo2d20xUW1oTG4wSUJkQnVDVGtLNDcxYkJlUmlqaVlPVEdFdXU1aHBEdDJSd05nQ0ppMzBCR1dOWnJYWXloeTJ5S0RuRUttVGEtV2w1bmdqVEV5WmZqRFRqUTRHbVRuVGFqMXh0U2lSTFM0S0tQWlBqRFBYOHd5b1dKSUZPTktJeC1wN0pzeUZpVGtmVUpaUm03RzJ0bk8zdEROMFYzc2dSR0ctX2pNS2VkVnNjVktrUmwzcEtMUllVUzY4aU5pbGtrV2l2S0ZQSnJINWNNSkZzTFhvaUdOVGVaRFhVdFRnbGRmRmlTSkZnRVlsYU56MFJxSWZ6cnNuMy0tNEtzYW9TT0tQdlVyNlFDOU4zWFVHZEpDd1B1UGNmWVcxRmRySmNkY3UwSlROVXNwODMwWHplc2xPdmg1NWJ6aDZzZTY5WWpuVUN2MlFhUmJFSFk3bmpKWnZVZG1iazJpdHI4Y3FDSE5ONTRXekZGZ3B6VVZyOEVzWVlZUzJqSnhCeEQtMWxwZHREUU1sMTZyc01vaTdCYnNPcXJhaU9MT21mZnJNRnZCOFFTUzEwMTF4WDdXMjEydHpYRWRLU3BMWXZFZy1FSzZIMzNaS3l1eHFnMTU4aDNjNmJJdEtnenNDN1pheXdUcWJxdTlkWmhVRGRTY3BkcG9FWU90ZmtuN1dQRU5ncVY4eEx0YTJyT094cWNSaE1HSzNhRFNmTXdGdnBlU01aMS1TNEMyMWZyMkxGRWFkZ1lRQ3FpMkNhTTRhRmozOWk2T1pSYklEeGJYWi1QWWpPQXBrMWJ5cWViMUNueVZReVFzOEdoVjVJZ1VhbUxDUklBdlhlMEd4T2d0OXZDOVROb1BVX3lmdi15NTVqYmktZ2hUTlNacG0ySjVmWVp6SGMyZjdmYXl0ZmVJWV83dmtOeFBXbmM4WkpFZ1BZbmtxV2xNSlRHd0g5V0lwR044NU80cGI0OU9IUTFPOXFnbDFUd0hZWHJVSFRxRTNmeXBNVTVGMkQ5cjBrMDhld01PX2Vpb3JRdFlVMTZoM1NDbjVScEtBQ0t2RTFIM2JlSm9nTURFeVlrcnNpNlo2dHAyRDJNeWZIeUZhT3h2RDlzTjNaczN0SFRzaHVMbjdWckJ5U3NsQ3BkSlRtQnNfdVdfOHdzYnlDdXVmZTFEY2lyUFVBN3prekpQc0NxdThLZ0pFZTc5WFRya2pwLUZlLW9rekprVWtVYUhVSE1QV1lhTXpETGFDLTV3RnAzMG5FdWpjVFQ1R001MlBkX1JXaE55dHFNeHFUbGNhMWZzLVF0VmY2dFk3SzFtRmNYdG81SE9GN2o4YXFtMkdSaXJiOTl3end0YlkteXZJNGhBM2RWMzhPQlNINWZYcmJzWGtoMU5VU3RFbXNqUUNQbjF6X3RDdWJ3bUlKQURpYmsxWDBiOENFX3FSUlhPM0ZidWxRT3RTUi1Nci1LazBSTG5OaWNIX1FkTFE3UkxrblFVcHFGeDRYWk5Ic1RaeDJlTGV1NS02N0dJZnlNQkFWS0k5TGJJXzZxVFMyS1ZEOWZremtpWDk2TjRLcWpHZENJQWRlaF9mM3NidVVYREJVN3lyNWhpdEtDVjRrbTdJZ0NPYXlxVk95QmFlZVBua0I5aHQ5Y2QyNkVQc1piYUQ0YzR3d0ZKVkRvcUJaaHktNmk4RFdoNVdkWENKcl9OZnhHQUdhTVQ1dEpXQTJVbFRoNkJaVjlQc1BpajM1VEM5aW0yNVJIcTcxSlljVTZNVTZ3azRUNHpZWl85cWlWcERoZG9VMGdEOEkyazA2NFl4ejZidUpobm9wMzh2dEtGUkJMZ3J6dUhqWF95OUlBcFVNeEVSNy0waEZOUVdxTmNiYUl1WDFBbUYyTWlLbk1QN1ZXZVpPektob282R3p6aEs3SE52UmoxLVpOOVNFbnM2OURoU19fZ05lZWtMZkI4cXAwYmNTcXpiOWpINTVrX1ltSDYxTTBfV2lOZU12N2xYd2xFdEY3Q3RKOVN6R2EyYWFGVkoyUm5TM2hfNlFUVVRFamhRaDM4Q0RHNGtTRzFKZEl5NVdDa1BYNENVOWlfMkZPMDFHX1FXVENDLW9hYUNwTHY4cHZ2Q3FfY09oNWtPdWltUkNBck5DZHlOZDJPc0ZIdGdzM1RJQ3RKZEJ4SHhYeEctWGZoWEo5OENHel84aXJPUVFOaG9ZQV9lMlRyb1hrOGkxRmNpSm5ja1E2N3VfUWJfTjRtSS1pWWtXcFVfUFJ6MTdkZ2NGSXVnTkJINlBtUzg4OFRtYWt3bVNmMW9PQkpMX3E1S1BHenpabEFxQmpBYWVjeUhDTnJIbmZwaVBvT05Rc3R3c2hIVlpaVmdPVUFEbGx2R1J5NkpVOGtSWnU2NEhBLTdsb3ZJUmtNYnV3UG9mVTk4NWxzV2wzenJpUUJXaUhId3ZXNjZGc3V5MkwzUncyRlVGbFBhSnZQaGY1QXRRNG40UDRvNkZmNXpUaW5tR20yUGNLNXBPbVc2VGdCX3JtVk55dEEtR0ZMM1c4el9vR2VVeU53eC1kX2RQYktKNXZ2MHlkQnQ4WWp4VHAtVWQ1az0=)
        track: beta
